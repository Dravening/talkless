使用kk工具安装kubesphere踩过的大坑

1.要注意网卡里面别有不认识的网卡，否则node节点网络可能不是主机网卡的ip
2.可以尝试先单独安装
./kk create cluster --with-kubernetes v1.22.12
3.测试是否好用，vim nginx.yaml

apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: nginx #为该Deployment设置key为app，value为nginx的标签
  name: nginx
  namespace: kube-system
spec:
  replicas: 1 #副本数量
  selector: #标签选择器，与上面的标签共同作用
    matchLabels: #选择包含标签app:nginx的资源
      app: nginx
  template: #这是选择或创建的Pod的模板
    metadata: #Pod的元数据
      labels: #Pod的标签，上面的selector即选择包含标签app:nginx的Pod
        app: nginx
    spec: #期望Pod实现的功能（即在pod中部署）
      containers: #生成container，与docker中的container是同一种
      - name: ssx-nginx-c
        image: nginx:latest #使用镜像nginx: 创建container，该container默认80端口可访问
        ports:
        - containerPort: 80  # 开启本容器的80端口可访问

---
apiVersion: v1
kind: Service
metadata:
  labels:
   app: nginx
  name: nginx
  namespace: kube-system
spec:
  ports:
  - port: 80 #写nginx本身端口
    name: ssx-nginx-c
    protocol: TCP
    targetPort: 80 # 容器nginx对外开放的端口 上面的dm已经指定了
    nodePort: 31090 #外网访问的端口
  selector:
    app: nginx    #选择包含标签app:nginx的资源
  type: NodePort


3.测试好用了之后再
./kk delete cluster
./kk create cluster --with-kubernetes v1.22.12 --with-kubesphere v3.3.1
这两步不需要把k8s环境清除的太干净。

4.如果要全部删除环境，除执行./kk delete cluster外，还应继续执行如下脚本。
#!/bin/bash
sudo rm -rvf $HOME/.kube
sudo rm -rvf ~/.kube/
sudo rm -rvf /etc/kubernetes/
sudo rm -rvf /etc/systemd/system/kubelet.service.d
sudo rm -rvf /etc/systemd/system/kubelet.service
sudo rm -rvf /usr/bin/kube*
sudo rm -rvf /etc/cni
sudo rm -rvf /opt/cni
sudo rm -rvf /var/lib/etcd
sudo rm -rvf /var/etcd
sudo rm -rvf /etc/ssl/etcd/
rm -rf /etc/systemd/system/kubelet.service
rm -rf /etc/systemd/system/kube*
rm -rf /var/lib/kube*

5.如果发现scheduler的健康检查状态为unhealthy，执行以下操作

vim /etc/kubernetes/manifests/kube-controller-manager.yaml
注释掉里面的--port=0

vim /etc/kubernetes/manifests/kube-scheduler.yaml
注释掉里面的--port=0

记得重启kubelet